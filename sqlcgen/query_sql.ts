// Code generated by sqlc. DO NOT EDIT.

import { Database } from "better-sqlite3";

export const getUserQuery = `-- name: GetUser :one
SELECT id, username, updated_at, created_at
FROM users
WHERE
  CASE WHEN CAST(?1 AS integer) IS NOT NULL THEN id = ?1 ELSE false END OR
  CASE WHEN CAST(?2 AS string) IS NOT NULL THEN username = ?2 ELSE false END
LIMIT 1`;

export interface GetUserArgs {
    nullableId?: number | null;
    nullableUsername?: any | null;
}

export interface GetUserRow {
    id: number;
    username: any;
    updatedAt: Date;
    createdAt: Date;
}

export async function getUser(database: Database, args: GetUserArgs): Promise<GetUserRow | null> {
    const stmt = database.prepare(getUserQuery);
    const result = await stmt.get({ 1: args.nullableId, 2: args.nullableUsername });
    if (result == undefined) {
        return null;
    }
    return result as GetUserRow;
}

export const getTheUserQuery = `-- name: GetTheUser :many
;

SELECT id, username, updated_at, created_at
FROM users
WHERE
  id = ?1`;

export interface GetTheUserArgs {
    id: number;
}

export interface GetTheUserRow {
    id: number;
    username: any;
    updatedAt: Date;
    createdAt: Date;
}

export async function getTheUser(database: Database, args: GetTheUserArgs): Promise<GetTheUserRow[]> {
    const stmt = database.prepare(getTheUserQuery);
    const result = await stmt.all({ 1: args.id });
    return result as GetTheUserRow[];
}

export const addUserQuery = `-- name: AddUser :exec
;

INSERT INTO users (username) VALUES (?1)`;

export interface AddUserArgs {
    username: any;
}

export async function addUser(database: Database, args: AddUserArgs): Promise<void> {
    const stmt = database.prepare(addUserQuery);
    await stmt.run({ 1: args.username });
}

